input {
    kafka{
        bootstrap_servers => "kafka-broker-1.devopslearning.xyz:9092,kafka-broker-2.devopslearning.xyz:9093,kafka-broker-3.devopslearning.xyz:9094"
        group_id => "logfile-operations"
        client_id => "logfile-operations"
        max_poll_interval_ms => 600000
        consumer_threads => 3
        topics => ["db-message-logs"]
        security_protocol => "SSL"
        ssl_key_password => "{{ kafka_ssl_password }}"
        ssl_keystore_location => "/etc/logstash/ssl/kafka_ssl/client.keystore.jks"
        ssl_keystore_password => "{{ kafka_ssl_password }}"
        ssl_truststore_location => "/etc/logstash/ssl/kafka_ssl/client.truststore.jks"
        ssl_truststore_password => "{{ kafka_ssl_password }}"
        ssl_endpoint_identification_algorithm => " "
    }
}
filter{
    grok{
      match=>{"message"=>"%{USERNAME:hostname} (?<ts>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:(\.\d{0,}))?\w{0,2}) %{WORD:http_status} \{(?<request_id>ReqID:[^}]*)\} %{WORD:request_method} (?:(?<uri>[^\s]*))? (?<duration>dur=[^\s]*)%{SPACE}(?:(?<trash2>(?:ServerInfo\()))?(?<server_id>\d{0,3}.\d{0,3}.\d{0,3}.\d{0,3}( \d{0,3}.\d{0,3}.\d{0,3}.\d{0,3})*) (?<server_type>(?:(\w{0,}-\w{0,}-\w{0,})|(\b\w+\b))) (?<environment>[^\)]*)\) (?:(?<auth>(?:(\w\:\s))?[^\s]*))(?:(?<mdn>[^\n|\r]*))?(\r|\n|\s)((?:(?<tenant_key>TenantKey:\"\b+\w+\b+\"))?%{SPACE}(?:(?<session_token>SessionToken:\"[^\s]*\"))?)(?:(?<trash>Request: ))?(?:(?<request_body>(?:[*]{0,})?(?:\{.*\})?(?:[*]{0,})?))?(?:(\r|\n))?(?:(?<garbage>Response: ))?(?:(?<response_body>(?:[*]{0,})?(?:\{[^~]*\})?(?:[*]{0,})?))?"}
    }
    mutate{
      gsub => [
       "request_body","\*","",
       "response_body","\*","",
       "session_token","SessionToken:","",
       "tenant_key","TenantKey:","",
       "duration","dur=","",
       "request_id","ReqID:",""
       ]
      gsub => [
       "request_body","\"","",
       "response_body","\"","",
       "response_body","[\\]","",
       "tenant_key","\"","",
       "session_token","\"",""
       ]
    }
    if "_grokparsefailure" in [tags] {
      grok{
        match=>{"message"=>"%{USERNAME:hostname} (?<ts>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\w{0,2}) %{WORD:status} \{(?<request_id>ReqID:[^}]*)\} %{WORD:request_method} (?:(?<uri>[^\s]*))? (?<duration>dur=[^\s]*)%{SPACE}(?:(?<trash2>(?:ServerInfo\()))?(?<server_id>\d{0,3}.\d{0,3}.\d{0,3}.\d{0,3}( \d{0,3}.\d{0,3}.\d{0,3}.\d{0,3})*) (?<server_type>\b\w+\b) (?<environment>[^\)]*)\) (?:(?<auth>[^\s]*))?%{SPACE}(?:(?<tenant_key>TenantKey:\"\b+\w+\b+\"))?%{SPACE}(?:(?<session_token>SessionToken:\"[^\s]*\"))?"}
      } 
      mutate{
        remove_tag => ["_grokparsefailure"]
        gsub => [
          "session_token","SessionToken:","",
          "tenant_key","TenantKey:","",
          "duration","dur=","",
          "request_id","ReqID:","",
          "tenant_key","\"","",
          "session_token","\"",""
          ]
      }     
    }
    if "_grokparsefailure" in [tags] { drop {} }
    mutate{ remove_field => ["message","hostname","trash","trash2","garbage","tags"] }
}

output {
       elasticsearch {
             hosts => "https://elastic-stack.devopslearning.xyz:9200"
             user => "elastic"
             password => "{{ elk_password }}"
             ssl => true
             ssl_certificate_verification => true
             cacert => "/etc/ssl/certs/ca-certificates.crt"
	     index=>"db_operation_logs-%{+YYYY.MM.dd}"
       }
}
