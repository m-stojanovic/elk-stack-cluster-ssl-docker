input {
    kafka{
        bootstrap_servers => "kafka-broker-1.devopslearning.xyz:9092,kafka-broker-2.devopslearning.xyz:9093,kafka-broker-3.devopslearning.xyz:9094"
        group_id => "logfile-messages"
        client_id => "logfilemessages2"
        max_poll_interval_ms => 600000
        consumer_threads => 3
        topics => ["db-message-logs"]
        auto_offset_reset=>"earliest"
        security_protocol => "SSL"
        ssl_key_password => "{{ kafka_ssl_password }}"
        ssl_keystore_location => "/etc/logstash/ssl/kafka_ssl/client.keystore.jks"
        ssl_keystore_password => "{{ kafka_ssl_password }}"
        ssl_truststore_location => "/etc/logstash/ssl/kafka_ssl/client.truststore.jks"
        ssl_truststore_password => "{{ kafka_ssl_password }}"
        ssl_endpoint_identification_algorithm => " "
    }
}
filter{
   grok{
      match=>{"message"=>"%{USERNAME:hostname} (?<ts>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\w{0,2}) (?:\[%{WORD:severity}\]) (?:(?<request_id>(?:ReqID:[^\s]*)))?%{SPACE}(?:(?<trash2>(?:ServerInfo\()))?(?<server_id>\d{0,3}.\d{0,3}.\d{0,3}.\d{0,3}( \d{0,3}.\d{0,3}.\d{0,3}.\d{0,3})*) (?<server_type>\b\w+\b) (?<environment>[^\)]*)\)%{SPACE}(?:(?<request_method>\{\b\w+\b))? (?:(?<uri>[^\s]*)\})?%{SPACE}(?:(?<user_id>\(([^)]*)\)))?%{SPACE}(?<server_message>((.|\n)*))"}
   }
   mutate{ remove_field => ["message","hostname","trash","trash2"] }
   mutate{ rename => ["server_message","message"] }
   mutate{
      gsub=>[
        "message","\\n"," ",
        "request_id","ReqID:","",
        "request_method","\{",""
        ]
      split=>["server_id"," "]
   }
   if "_grokparsefailure" in [tags] { drop {} }
}
output {
       elasticsearch {
	     hosts => "https://elastic-stack.devopslearning.xyz:9200"
             user => "elastic"
             password => "{{ elk_password }}"
             ssl => true
             ssl_certificate_verification => true
             cacert => "/etc/ssl/certs/ca-certificates.crt"
             index => "db_message_logs-%{+YYYY.MM.dd}"
        }
}
